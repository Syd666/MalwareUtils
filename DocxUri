# -*- coding: utf-8 -*-
"""
Grapler
@author Les Wellington

A program to disect the docx file and rip out any malicious links. 

"""

import officedissector # for disecting and devouring the files.
import argparse #feeble argument parsing. 

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-version', action='version', version = '%(prog)s 1.0')
    
    try:
        dfile = officedissector.doc.Document('C:/Users/worker/Desktop/Eli_.docx')
        print("File handle created.\n")
        #lets accumalate some basic info about the file
        ismacroenabled = dfile.is_macro_enabled
        istemplate = dfile.is_template
        modificationdate = dfile.core_properties.modified
        # Lets print it out.
        print('Does the file have Macros?',ismacroenabled)
        print('Modification-Date: ',modificationdate)
        #check for images
        jpegs = dfile.parts_by_content_type('image/jpeg')
        pngs = dfile.parts_by_content_type('image/png')
        if len(jpegs) <= 0 and len(pngs) <= 0:
            print('File does not contain any Image files')
        # lets get all the parts 
        print('\nFile Parts:')
        for p in dfile.parts:
            print p.name
            
            #if p.name == '/word/vbaProject.bin':
               # print('stream:',p.stream().read(10))
                
                # p.name returns a String
            
             # p.stream()
            #if p.name == '/word/vbaProject.bin':
                #macros = dfile.parts_by_content_type('/word/vbaProject.bin')
                #print(p.stream().read(10))
                #print(macros[0].name)
                #print(macros[0].stream.read(10))
                # p.name returns a String
            #print p.stream().read(10)
        #print(ismacroenabled)
        mainpart = dfile.main_part()
        
       # mainpart_contenttype = mainpart.content_type()
        #print(mainpart_contenttype)
        print('\nFile Relationships:')
        allrels = mainpart.relationships_out()
        
       # print(doc.part_by_name['/word/document.xml'].relationships_in()[0].target)
        for i in range(len(allrels)) :
            
            print(allrels[i].target)
            
        #print(allrels)
        # Lets get macros
        if (ismacroenabled):
            print("Macros:")
            for p in dfile.parts:
                if p.name == '/word/vbaProject.bin':
                    print('stream:',p.stream().read(400))
        
    except IOError:
         print("Couldn't Open file. Please check file path.")
    


if __name__ == "__main__":
    
    main()

